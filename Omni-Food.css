/* NOTE: Always make design system at the top of your css file to make it easy for you to choose 
          style decisions, spacing analyzing and color reusability etc, whenever you need to it.        */

/* 

--- 01 TYPOGRAPHY SYSTEM

FONT SIZE SYSTEM (px):
10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98

FONT WEIGHTS:
-Defualt: 400
-Medium: 500
-Semi-Bold: 600
-Bold: 700

LINE HEIGHTS:
-Default: 01
-Small: 1.05
-Mid Medium: 1.1
-Medium: 1.5
-Paragraph Default: 1.6

LETTER SPACING
-(-1px)
-0.75px

--- 02 COLORS FOR THE WEB

-Main/Primary: #e67e22
-Tints: #fdf2e9, #fae5d3
-Shades:
-Accents
-Grey Color: #888, #555,#333 (Basically used for fonts to relieve eyes while reading),
              #6f6f6f (Lightest grey-color allowed on #fdf2e9).

--- 03 SHADOWS
-0 2.4rem 4.8rem rgba(0, 0, 0, 0.075);

--- 04 BORDER-RADIUS
-Default: 20px

--- 05 WHITESPACE

SPACING SYSTEM (px):
2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128

*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Explained in "How rem works! */
html {
  font-size: 62.5%;
}

/* For choosing the best typography for your website according to its personality, its better to write 
some code before it, and give it as sans-serif for some time, or set it as default version. */
body {
  font-family: "Rubik", sans-serif;
  color: #555;
  line-height: 1;
  font-weight: 400;
}

/**********************************************************************************/
/* GENERAL REUSABLE COMPONENTS */
/**********************************************************************************/

.container {
  max-width: 120rem;
  margin: 0 auto;
  padding: 0 2.2rem;

  font-size: 1.8rem;
}

.grid {
  display: grid;
  column-gap: 6.4rem;
  row-gap: 9.6rem;

  /* margin-bottom: 9.6rem; */
}

/* .grid:last-child {
  margin-bottom: 0;
} */

/* The ↓ below property is same as the ↑ above one (.grid:last-child); It's a more handy trick, 
which means: give margin-bottom to all the grid-elements except the last child. 
Basically this handy property reduce the number of code lines like; 
1. first we give margin-bottom property in the grid class.
2. then, we give another grid-class pseudo-property of last-child to give margin-property value = 0.*/
.grid:not(:last-child) {
  margin-bottom: 9.6rem;
}

.grid--center-vertically {
  align-items: center;
}

.grid--col-2 {
  grid-template-columns: repeat(2, 1fr);
}

.grid--col-3 {
  grid-template-columns: repeat(3, 1fr);
}

.grid--col-4 {
  grid-template-columns: repeat(4, 1fr);
}

.heading-primary,
.heading-secondary,
.heading-tertiary {
  color: #333;
  font-weight: 700;
  letter-spacing: -1px; /* Here we use px because it is a tiny difference and it does not affect on font-size */
}

.heading-primary {
  font-size: 5.2rem;
  line-height: 1.05;
  margin-bottom: 3.2rem;
}

.heading-secondary {
  font-size: 4.4rem;
  line-height: 1.1;
  margin-bottom: 9.6rem;
}

.heading-tertiary {
  font-size: 3.6rem;
  line-height: 1.1;
  margin-bottom: 3.2rem;
}

.subheading {
  font-size: 1.6rem;
  font-weight: 500;
  color: #cf711f;
  letter-spacing: 0.75px;
  text-transform: uppercase;
  margin-bottom: 2.4rem;
  display: block;
}

.btn:link,
.btn:visited {
  font-size: 1.8rem;
  text-decoration: none;
  font-weight: 600;

  display: inline-block;
  padding: 1.6rem 3.2rem;
  border-radius: 20px; /* We dont want to scale that up!, so we fix this value as in pixels. */

  /* The transition property allows us to transition(fade from one to another) between two elements using an animation */
  /* Remember: Always use transition property on original(parent) element. */
  transition: all 0.3s; /* Commonly use 0.3s in transition property! */
  /* "all": set all the properties that are linked with button like background-color, border etc*/
  /* You can also specify only one part to animate. Example: transition: background-color 1s; */
}

.btn--primary:link,
.btn--primary:visited {
  background-color: #e67e22;
  color: #fff;
}

.btn--secondary:link,
.btn--secondary:visited {
  background-color: #fff;
  color: #555;
}

.btn--primary:hover,
.btn--primary:active {
  background-color: #e98b38;
}

.btn--secondary:hover,
.btn--secondary:active {
  /* This border makes an effect of glitch in our heading-primary and hero-description ↓ */
  /* border: 1px solid #333; */

  /* In order to avoid glitch, below we use the trick of box shadow which will create exact same border
  but inside of an element. */
  /* Trick to add border inside of an element */
  box-shadow: inset 0 0 0 1px #e67e22;
  /* Here we use "inset" property which basically used for doing operation inside of an element */
  /* So outline will pally inside of the element box! */
}

.link:link,
.link:visited {
  display: inline-block;
  color: #e67e22;
  text-decoration: none;
  border-bottom: 1px solid currentColor;
  /* currentColor: Apply the current color which had applied on the element. Ex: #e67e22 */
  padding-bottom: 3px;
}

.link:hover,
.link:active {
  color: #e98b38;
}

/**********************************************************************************/
/* HELPER CLASSES */
/**********************************************************************************/

/* you should ask from me that, Why do not I put margin right on ".btn" class because if we use that class property on another button, then there it will also add margin right! */
/* So for making ".btn" class reusablitity, we make another class for that. */
.btn--margin-right {
  margin-right: 1.6rem !important;
}

.link--margin-bottom {
  margin-bottom: 4.8rem !important;
}

.center-text {
  text-align: center;
}

strong {
  font-weight: 500;
}

/**********************************************************************************/
/* HEADER */
/**********************************************************************************/

.header {
  font-size: 2rem;
  background-color: #fdf2e9;
  padding: 3.2rem;

  display: flex;
  align-items: center;
  justify-content: space-between;

  /* We define this height because we have to made this navigation-bar as sticky-bar, so In order for 
  making this sticky bar we have to give a fixed height. */
  height: 9.6rem;
}

.logo {
  height: 2.2rem;
}

/**********************************************************************************/
/* NAVIGATION */
/**********************************************************************************/

.main-nav-list {
  list-style: none;

  display: flex;
  align-items: center;
  gap: 3.2rem;
}

.main-nav-link:link,
.main-nav-link:visited {
  display: inline-block;
  font-size: 1.8rem;
  font-weight: 500;
  color: #333;
  text-decoration: none;
  transition: all 0.3s;
}

.main-nav-link:hover,
.main-nav-link:active {
  color: #cf711f;
}

/* We do that, beacuse we want to increase specificity to implement color property and much more!, as
we have above color property etc as well, so it does not implement this below property due to 
its low specificity, that's why! */
/* Note: if you maintain space between them then it will become descendent operator */
.main-nav-link.nav-CTA {
  color: #fff;
  background-color: #e67e22;

  padding: 1.2rem 2.4rem;
  border-radius: 20px; /* Here we again dont want to scale that up, so we fix this value as in pixels. */
}

.main-nav-link.nav-CTA:hover,
.main-nav-link.nav-CTA:active {
  background-color: #e98b38;
}

/**********************************************************************************/
/* HERO SECTION */
/**********************************************************************************/

.hero-section {
  background-color: #fdf2e9;
  padding: 4.8rem 0 9.6rem 0;
}

.hero {
  max-width: 130rem;
  margin: 0 auto;
  /* We give padding because If a user have 607px of width then the hero section is stick like glue 
  to it's windows browser (left/right side), which may affect a bad impact on user interface. */
  padding: 0 2.2rem;

  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 9.6rem;
  align-items: center;
}

.hero-img {
  width: 100%;
}

.hero-description {
  font-size: 2.4rem;
  line-height: 1.5;
  margin-bottom: 4.8rem;
}

.delivered-meals {
  display: flex;
  gap: 1.6rem;

  align-items: center;
  margin-top: 8rem;
}

.delivered-imgs img {
  width: 4.8rem;
  height: 4.8rem;
  border-radius: 50%;
  margin-right: -1.6rem;
  border: 3px solid #fdf2e9;
}

.delivered-imgs img:last-child {
  margin-right: 0;
}

.delivered-text {
  font-size: 1.8rem;
  font-weight: 600;
}

.delivered-text span {
  color: #cf711f;
}

/**********************************************************************************/
/* FEATURED-IN SECTION */
/**********************************************************************************/
.section-featured {
  padding: 4.8rem 0 3.2rem 0;
}

.heading-featured-in {
  font-size: 1.6rem;
  font-weight: 700;
  color: #888;
  letter-spacing: 0.75px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 2.4rem;
}

.logos {
  display: flex;
  justify-content: space-around;
}

.logos img {
  height: 3.2rem;

  /* The "filter" CSS property applies graphical effects like blur or color shift to
  an element. Filters are commonly used to adjust the rendering of images, backgrounds, 
  and borders. Several functions, such as blur() and contrast() , are available to help 
  you achieve predefined effects */

  /* GRAYSCALE: Specifies the grayscale as a number or percent. 100% (1) will make the element completely 
  grayscale-(give shade of black). 0% (0) represents the original image (no effect). */

  /* filter: grayscale(1); */

  /* But we don't use grayscale beacuse it effects more black on images where its orignal color is 
  also black like In featured images; black having more black; uncomment it the above filter property
  to see the effect. This effect also makes a user too much attention. */

  /* Now we use "Brightness" instead of "grayscale", and also give some low opacity to make it perfect.*/

  filter: brightness(0%);
  opacity: 0.6;
}
/**********************************************************************************/
/* HOW IT WORKS SECTION */
/**********************************************************************************/

.section-how {
  padding: 9.6rem 0;
}

.step-number {
  font-size: 8.6rem;
  font-weight: 600;
  color: #bbb;
  margin-bottom: 1.2rem;
}

.step-description {
  font-size: 1.8rem;
  line-height: 1.5;
}

.step-img-box {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

/* Always use pseudo elments of "before/after" for making visual diagram and styles (like Circle), 
this will make HTML file as clean and simple.
Remember: you can always use one-time "before and after" pseudo classes on an element. */
/* ↓ Adding circle visual diagram of style for making website as professional as calm personality. */
.step-img-box::before,
.step-img-box::after {
  content: "";
  border-radius: 50%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.step-img-box::before {
  background-color: #fdf2e9;
  width: 70%;

  /* Now, height doesn't work in that type of situations. so there is handy trick which is 
  padding-bottom which will create an effect in same way. */
  /* height: 60%; */
  padding-bottom: 70%;

  /* Here, we use a new property called "z-index" which gives us, a result of positioning an element.
  If you give +ve value, which places itself upto a position of top on every other element. if -ve 
  then it places itself as below of other elements. */
  z-index: -2;
  /* Un-comment it, to analyze the effect. */
}

.step-img-box::after {
  background-color: #fae5d3;
  width: 55%;

  /* Now, height doesn't work in that type of situations. so there is handy trick which is 
  padding-bottom which will create an effect in same way. */
  /* height: 60%; */
  padding-bottom: 55%;

  /* Here, we use a new property called "z-index" which gives us, a result of positioning an element.
  If you give +ve value, which places itself upto a position of top on every other element. if -ve 
  then it places itself as below of other elements. */
  z-index: -1;
  /* Un-comment it, to analyze the effect. */
}

.step-img {
  width: 35%;
}

/**********************************************************************************/
/* MEAL SECTION */
/**********************************************************************************/

.section-meal {
  padding: 9.6rem 0;
}

.meal {
  box-shadow: 0 2.4rem 4.8rem rgba(0, 0, 0, 0.075);
  border-radius: 11px;

  /* When overflow: hidden is added to the container element, it hides its children that don’t fit 
  in the container, like in this example; without overflow property, the Image will show above on 
  border radius which will hide the card radius. */
  overflow: hidden;
  transition: all 0.4s;
}

.meal:hover {
  transform: translateY(-1.2rem);
  box-shadow: 0 3.2rem 6.4rem rgba(0, 0, 0, 0.06);
}

.meal-content {
  padding: 3.2rem 4.8rem 4.8rem 4.8rem;
}

.meal-tags {
  margin-bottom: 1.2rem;
  display: flex;
  gap: 0.5rem;
}

.tag {
  font-size: 1.3rem;
  letter-spacing: 0.1rem;
  color: #333;
  text-transform: uppercase;
  border-radius: 100px;

  display: inline-block;
  padding: 0.5rem 1rem;
}

.tag--vegetarian {
  background-color: #51cf66;
}

.tag--vegan {
  background-color: #94d82d;
}

.tag--paleo {
  background-color: #ffd43b;
}

.meal-title {
  font-size: 2.4rem;
  color: #333;
  font-weight: 600;
  margin-bottom: 3rem;
}

.meal-attributes {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 1.6rem;
}

.meal-attribute {
  font-size: 1.8rem;
  display: flex;
  align-items: center;
  gap: 1.6rem;
}

.meal-img {
  width: 100%;
}

.meal-icon {
  height: 2.4rem;
  width: 2.4rem;
  color: #e67e22;
}

.meal-lists {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 1.6rem;
}

.meal-list {
  font-size: 2rem;
  display: flex;
  align-items: center;
  gap: 1.6rem;
}

.meal-list-icon {
  height: 2.4rem;
  width: 2.4rem;
  color: #e67e22;
}

.all-recipes {
  text-align: center;
  font-size: 1.8rem;
}

.all-recipes-link-style:link,
.all-recipes-link-style:visited {
  color: #e67e22;
  position: relative;
  text-decoration: none;
  border-bottom: none;
}

/* Creating "The Passing Underline Link Hover Effect"  */
.all-recipes-link-style::before {
  content: "";
  position: absolute;
  width: 100%;
  height: 1px;
  border-radius: 4px;
  background-color: #e67e22;
  bottom: 0;
  left: 0;
  transform-origin: right;
  transform: scaleX(0);
  transition: transform 0.3s ease-in-out;
}

.all-recipes-link-style:hover::before {
  transform-origin: left;
  transform: scaleX(1);
}
/* **************************************************** */

/**********************************************************************************/
/* TESTIMONIALS SECTION */
/**********************************************************************************/

.section-testimonials {
  background-color: #fdf2e9;
  display: grid;
  grid-template-columns: 1.1fr 0.9fr;
  align-items: center;
}

.testimonials-container {
  padding: 9.6rem;
}

.testimonials {
  display: grid;
  grid-template-columns: 1fr 1fr;
  column-gap: 8rem;
  row-gap: 4.8rem;
}

.testimonial-img {
  width: 6.4rem;
  border-radius: 50%;
}

.testimonial-text {
  font-size: 1.8rem;
  line-height: 1.6;
  margin-bottom: 1.6rem;
}

.testimonial-author {
  font-size: 1.6rem;
  color: #6f6f6f;
}

.gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1.6rem;
  padding: 1.6rem;
}

.gallery-item {
  overflow: hidden;
}

.gallery-item img {
  display: block;
  width: 100%;
  transition: all 0.4s;
}

.gallery-item img:hover {
  transform: scale(1.1);
}

/**********************************************************************************/
/* PRICING SECTION */
/**********************************************************************************/

.section-pricing {
  padding: 9.6rem 0;
}

.pricing-plan {
  border-radius: 11px;

  /* We add "width" property because we want "less wide card"; for experiment, comment that property. */
  width: 75%;
}

.pricing-plan--starter {
  justify-self: end;
  border: 2px solid #fdf2e9;

  /* Due to a slightly up/down disturbance of CTA button bcz of adding border, we have to reduce 2px
  padding to the pricing card.  */
  padding: 4.6rem;
}

.pricing-plan--premium {
  background-color: #fdf2e9;
  padding: 4.8rem;
  position: relative;
  overflow: hidden;
}

.pricing-plan--premium::after {
  content: "Popular";
  font-size: 1.4rem;
  font-weight: 700;
  text-transform: uppercase;
  background-color: #ffd43b;
  padding: 1.4rem 6.4rem;

  position: absolute;
  top: 20px;
  right: -35px;
  transform: rotate(45deg);
}

.plan-header {
  text-align: center;
  margin-bottom: 4.8rem;
}

.plan-name {
  font-size: 1.8rem;
  font-weight: 600;
  color: #cf711f;
  text-transform: uppercase;
  letter-spacing: 0.75;
  margin-bottom: 3.2rem;
}

.plan-price {
  font-size: 7.4rem;
  font-weight: 600;
  color: #333;
  margin-bottom: 1.2rem;
}

.plan-price span {
  font-size: 3rem;
  font-weight: 500;
  margin-right: 0.8rem;
}

.plan-text {
  font-size: 1.8rem;
  color: #6f6f6f;
  line-height: 1.6;
  margin-bottom: 3.2rem;
}

.price-btn {
  text-align: center;
  margin-top: 4.8rem;
}

.plan-details {
  font-size: 1.6rem;
  line-height: 1.6;
  text-align: center;
}

/* FEATURE */

.feature-icon {
  height: 3.2rem;
  width: 3.2rem;
  color: #e67e22;
  background-color: #fdf2e9;
  padding: 1.6rem;
  border-radius: 50%;
  margin-bottom: 3.2rem;
}

.feature-title {
  font-size: 2.4rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 1.6rem;
}

.feature-text {
  font-size: 1.8rem;
  line-height: 1.8;
}

/**********************************************************************************/
/* CTA SECTION */
/**********************************************************************************/

.section-cta {
  padding: 9.6rem 0;
}

.cta {
  display: grid;
  grid-template-columns: 2fr 1fr;
  background-color: #e67e22;
  border-radius: 11px;
  box-shadow: 0 2.4rem 4.8rem rgba(0, 0, 0, 0.15);
  overflow: hidden;

  /* temporary-property */
  height: 50rem;
}

.cta-image {
  background-image: linear-gradient(
      45deg,
      rgba(235, 151, 78, 0.5),
      rgba(230, 125, 34, 0.5)
    ),
    url(./Images/eating.jpg);
  background-size: cover;

  /* background-position: This property is also a handy property, it helps us when we shrink our website
  so the picture on the container/web-page is in center.  OR  The background-position property in CSS 
  allows you to move a background image (or gradient) around within its container.*/
  background-position: center;
}

.cta-text-box {
  color: #2e1907;
  padding: 4.8rem 6.4rem 6.4rem 6.4rem;
}

/* -------------------------------------------------------------------------------------------------------------- */
/* In below scenario, these property is applied only on heading-secondary(update the property) not on cta-class
property, if you have to, then you have to add comma"," in between, this scenrio means add property to child 
element of cta which is heading-scondary class property.  */
.cta .heading-secondary {
  color: #2e1907;
  margin-bottom: 3.2rem;
}
/* -------------------------------------------------------------------------------------------------------------- */

.cta-text {
  font-size: 1.8rem;
  line-height: 1.8;
  margin-bottom: 4.8rem;
}

.cta-form {
  display: grid;
  grid-template-columns: 1fr 1fr;
  column-gap: 3.2rem;
  row-gap: 2.4rem;
}
